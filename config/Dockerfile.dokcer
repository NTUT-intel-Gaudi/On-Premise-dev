# Use the official Ubuntu base image
FROM ubuntu:latest

# Set the maintainer label
LABEL maintainer="your-email@example.com"

# Prevent interactive prompts from appearing during package installation
ENV DEBIAN_FRONTEND=noninteractive

# Update the package list and install common packages
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    apt-utils \
    build-essential \
    curl \
    wget \
    vim \
    git \
    sudo \
    ca-certificates \
    gpg \
    systemctl \
    apt-transport-https && \
    rm -rf /var/lib/apt/lists/*\
RUN for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg; done
# Kubernetes installation steps
RUN mkdir -p -m 755 /etc/apt/keyrings && \
    curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg && \
    echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | tee /etc/apt/sources.list.d/kubernetes.list && \
    apt-get update && \
    apt-get install -y kubelet kubeadm kubectl && \
    apt-mark hold kubelet kubeadm kubectl && \
    systemctl enable --now kubelet

RUN systemctl enable --now containerd
RUN systemctl start --now containerd
# Copy any needed files from the host into the container
COPY . /
RUN chmod +x /entrypoint.sh
# Set the default command to run when the container starts
ENTRYPOINT [ "/entrypoint.sh" ]
# Expose any ports the app is supposed to listen on
# EXPOSE 8080
